name: NT8 Guard
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  guard:
    name: guard
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Repo hygiene (flexible)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $issues = @()

          # 1) Duplicate/colliding folders that confuse Windows
          $pairs = @(
            @{A='Docs';B='docs'},
            @{A='Diagnostics';B='Diag'},
            @{A='QA.TestKit';B='QA_Trace'},
            @{A='QA.TestKit';B='QA/ Trace'},
            @{A='NT8Bridge';B='Bridge'}
          )
          foreach ($p in $pairs) {
            if (Test-Path $p.A -and Test-Path $p.B) {
              $issues += "Both '$($p.A)' and '$($p.B)' exist. Pick one."
            }
          }

          # 2) Stray root .cs (allow only AssemblyInfo.cs under Properties/)
          $rootCs = Get-ChildItem -Path . -Filter *.cs -File -Depth 1
          foreach ($f in $rootCs) {
            if ($f.FullName -notmatch '\\Properties\\AssemblyInfo\.cs$') {
              $issues += "C# file at repo root: $($f.Name)"
            }
          }

          # 3) No NinjaTrader.* usage outside NT8Bridge/Strategies
          $allCs = Get-ChildItem -Recurse -Filter *.cs -File `
            | Where-Object { $_.FullName -notmatch '\\(NT8Bridge|Strategies)\\' }
          if ($allCs) {
            $hits = Select-String -Path $allCs.FullName -Pattern 'NinjaTrader\.' -SimpleMatch
            if ($hits) {
              $issues += "Found NinjaTrader.* usage outside NT8Bridge/Strategies."
              $hits | ForEach-Object { Write-Host "::error ::$($_.Path):$($_.LineNumber) $($_.Line.Trim())" }
            }
          }

          if ($issues.Count) {
            $issues | ForEach-Object { Write-Host "::error ::$_" }
            exit 1
          } else {
            Write-Host "Hygiene OK"
          }

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore solution
        run: nuget restore SDK.sln

      - name: Build (Release)
        run: msbuild SDK.sln /m /p:Configuration=Release

      - name: Verify SDK.dll produced
        shell: pwsh
        run: |
          $dlls = Get-ChildItem -Recurse -Filter SDK.dll -File `
            | Where-Object { $_.FullName -match '\\bin\\Release\\' }
          if (-not $dlls) {
            Write-Error "SDK.dll not produced under bin\\Release"
            exit 1
          }
          $dlls | ForEach-Object { Write-Host "Found: $($_.FullName)" }
